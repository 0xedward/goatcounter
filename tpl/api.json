{
  "swagger": "2.0",
  "info": {
    "title": "GoatCounter",
    "description": "API for GoatCounter",
    "version": "0.1",
    "contact": {
      "name": "Martin Tournoij",
      "url": "https://www.goatcounter.com/api",
      "email": "support@goatcounter.com"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "count"
    },
    {
      "name": "export"
    },
    {
      "name": "sites"
    },
    {
      "name": "user"
    }
  ],
  "paths": {
    "/api/v0/count": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This can count one or more pageviews. Pageviews are not persisted\nimmediately, but persisted in the background every 10 seconds.\n\nThe maximum amount of pageviews per request is 500.\n\nErrors will have the key set to the index of the pageview. Any pageviews not\nlisted have been processed and shouldn't be sent again.",
        "operationId": "POST_api_v0_count",
        "parameters": [
          {
            "in": "body",
            "name": "handlers.APICountRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/handlers.APICountRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "202 Accepted (no data)"
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/handlers.apiError"
            }
          },
          "403": {
            "description": "403 Forbidden",
            "schema": {
              "$ref": "#/definitions/handlers.authError"
            }
          }
        },
        "summary": "Count pageviews.",
        "tags": [
          "count"
        ]
      }
    },
    "/api/v0/export": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This starts a new export in the background.",
        "operationId": "POST_api_v0_export",
        "parameters": [
          {
            "in": "body",
            "name": "handlers.apiExportRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/handlers.apiExportRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "202 Accepted",
            "schema": {
              "$ref": "#/definitions/goatcounter.Export"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/handlers.apiError"
            }
          },
          "403": {
            "description": "403 Forbidden",
            "schema": {
              "$ref": "#/definitions/handlers.authError"
            }
          }
        },
        "summary": "Start a new export in the background.",
        "tags": [
          "export"
        ]
      }
    },
    "/api/v0/export/{id}": {
      "get": {
        "operationId": "GET_api_v0_export_{id}",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "schema": {
              "$ref": "#/definitions/goatcounter.Export"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/handlers.apiError"
            }
          },
          "403": {
            "description": "403 Forbidden",
            "schema": {
              "$ref": "#/definitions/handlers.authError"
            }
          }
        },
        "summary": "Get details about an export.",
        "tags": [
          "export"
        ]
      }
    },
    "/api/v0/export/{id}/download": {
      "get": {
        "description": "The export may take a while to generate, depending on the size. It will\nreturn a 202 Accepted status code if the export ID is still running.\n\nExport files are kept for 24 hours, after which they're deleted. This will\nreturn a 400 Gone status code if the export has been deleted.",
        "operationId": "GET_api_v0_export_{id}_download",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "200 OK (text/csv data)"
          },
          "202": {
            "description": "202 Accepted",
            "schema": {
              "$ref": "#/definitions/handlers.apiError"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/handlers.apiError"
            }
          },
          "403": {
            "description": "403 Forbidden",
            "schema": {
              "$ref": "#/definitions/handlers.authError"
            }
          }
        },
        "summary": "Download an export file.",
        "tags": [
          "export"
        ]
      }
    },
    "/api/v0/me": {
      "get": {
        "operationId": "GET_api_v0_me",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "schema": {
              "$ref": "#/definitions/handlers.meResponse"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/handlers.apiError"
            }
          },
          "403": {
            "description": "403 Forbidden",
            "schema": {
              "$ref": "#/definitions/handlers.authError"
            }
          }
        },
        "summary": "Get information about the current user and API key.",
        "tags": [
          "user"
        ]
      }
    },
    "/api/v0/sites": {
      "get": {
        "operationId": "GET_api_v0_sites",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "schema": {
              "$ref": "#/definitions/handlers.apiSitesResponse"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/handlers.apiError"
            }
          },
          "403": {
            "description": "403 Forbidden",
            "schema": {
              "$ref": "#/definitions/handlers.authError"
            }
          }
        },
        "summary": "List all sites.",
        "tags": [
          "sites"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "operationId": "PUT_api_v0_sites",
        "parameters": [
          {
            "in": "body",
            "name": "goatcounter.Site",
            "required": true,
            "schema": {
              "$ref": "#/definitions/goatcounter.Site"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "schema": {
              "$ref": "#/definitions/goatcounter.Site"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/handlers.apiError"
            }
          },
          "403": {
            "description": "403 Forbidden",
            "schema": {
              "$ref": "#/definitions/handlers.authError"
            }
          }
        },
        "summary": "Create a new site.",
        "tags": [
          "sites"
        ]
      }
    },
    "/api/v0/sites/{id}": {
      "get": {
        "description": "Get all information about one site.",
        "operationId": "GET_api_v0_sites_{id}",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "schema": {
              "$ref": "#/definitions/goatcounter.Site"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/handlers.apiError"
            }
          },
          "403": {
            "description": "403 Forbidden",
            "schema": {
              "$ref": "#/definitions/handlers.authError"
            }
          }
        },
        "summary": "Get information about a site.",
        "tags": [
          "sites"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "A POST request will *replace* the entire site with what's sent, blanking out\nany existing fields that may exist. A PATCH request will only update the\nfields that are sent.",
        "operationId": "POST_api_v0_sites_{id}",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "handlers.apiSiteUpdateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/handlers.apiSiteUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "schema": {
              "$ref": "#/definitions/goatcounter.Site"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/handlers.apiError"
            }
          },
          "403": {
            "description": "403 Forbidden",
            "schema": {
              "$ref": "#/definitions/handlers.authError"
            }
          }
        },
        "summary": "Update a site.",
        "tags": [
          "sites"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "A POST request will *replace* the entire site with what's sent, blanking out\nany existing fields that may exist. A PATCH request will only update the\nfields that are sent.",
        "operationId": "PATCH_api_v0_sites_{id}",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "handlers.apiSiteUpdateRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/handlers.apiSiteUpdateRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "schema": {
              "$ref": "#/definitions/goatcounter.Site"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/handlers.apiError"
            }
          },
          "403": {
            "description": "403 Forbidden",
            "schema": {
              "$ref": "#/definitions/handlers.authError"
            }
          }
        },
        "summary": "Update a site.",
        "tags": [
          "sites"
        ]
      }
    }
  },
  "definitions": {
    "goatcounter.APIToken": {
      "title": "APIToken",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "integer"
        }
      }
    },
    "goatcounter.Export": {
      "title": "Export",
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "error": {
          "description": "Any errors that may have occured.",
          "type": "string",
          "readOnly": true
        },
        "finished_at": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "hash": {
          "description": "SHA256 hash.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "readOnly": true
        },
        "last_hit_id": {
          "description": "Last hit ID that was exported; can be used as start_from_hit_id.",
          "type": "integer",
          "readOnly": true
        },
        "num_rows": {
          "type": "integer",
          "readOnly": true
        },
        "site_id": {
          "type": "integer",
          "readOnly": true
        },
        "size": {
          "description": "File size in MB.",
          "type": "string",
          "readOnly": true
        },
        "start_from_hit_id": {
          "description": "The hit ID this export was started from.",
          "type": "integer"
        }
      }
    },
    "goatcounter.Site": {
      "title": "Site",
      "type": "object",
      "properties": {
        "billing_amount": {
          "description": "Amount is being paid for the plan.",
          "type": "string",
          "readOnly": true
        },
        "billing_anchor": {
          "description": "\"Anchor\" for the billing period.\n\nThis is the time someone subscribed to a plan; and their billing period\nwill start on this day.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "cname": {
          "description": "Custom domain, e.g. \"stats.example.com\".\n\nWhen self-hosting this is the domain/vhost your site is accessible at.",
          "type": "string"
        },
        "cname_setup_at": {
          "description": "When the CNAME was verified.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "code": {
          "description": "Domain code (e.g. \"arp242\", which makes arp242.goatcounter.com). Only\nused for goatcounter.com and not when self-hosting.",
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "extra_pageviews": {
          "description": "Maximum number of extra pageviews to charge for.",
          "type": "integer",
          "readOnly": true
        },
        "first_hit_at": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer",
          "readOnly": true
        },
        "link_domain": {
          "description": "Site domain for linking (www.arp242.net).",
          "type": "string"
        },
        "parent": {
          "type": "integer",
          "readOnly": true
        },
        "plan": {
          "description": "Plan currently subscribed to.",
          "type": "string",
          "readOnly": true
        },
        "plan_cancel_at": {
          "description": "When this plan is scheduled to be cancelled.",
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "plan_pending": {
          "description": "Plan this site tried to subscribe to, but payment hasn't been verified\nyet.",
          "type": "string",
          "readOnly": true
        },
        "received_data": {
          "description": "Whether this site has received any data; will be true after the first\npageview.",
          "type": "boolean"
        },
        "setttings": {
          "$ref": "#/definitions/goatcounter.SiteSettings"
        },
        "state": {
          "type": "string"
        },
        "stripe": {
          "description": "Stripe customer ID.",
          "type": "string",
          "readOnly": true
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "user_defaults": {
          "$ref": "#/definitions/goatcounter.UserSettings"
        }
      }
    },
    "goatcounter.SiteSettings": {
      "title": "SiteSettings",
      "description": "SiteSettings contains all the user-configurable settings for a site, with\nthe exception of the domain and billing settings.\n\nThis is stored as JSON in the database.",
      "type": "object",
      "properties": {
        "allow_bosmang": {
          "type": "boolean"
        },
        "allow_counter": {
          "type": "boolean"
        },
        "campaigns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "collect": {
          "type": "integer"
        },
        "collect_regions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "data_retention": {
          "type": "integer"
        },
        "ignore_ips": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "public": {
          "type": "boolean"
        }
      }
    },
    "goatcounter.User": {
      "title": "User",
      "description": "User entry.",
      "type": "object",
      "properties": {
        "access": {
          "type": "object",
          "readOnly": true,
          "additionalProperties": {
            "$ref": "#/definitions/goatcounter.UserAccess"
          }
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "email": {
          "type": "string"
        },
        "email_verified": {
          "type": "boolean",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "readOnly": true
        },
        "login_at": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "reset_at": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "settings": {
          "$ref": "#/definitions/goatcounter.UserSettings"
        },
        "site": {
          "type": "integer",
          "readOnly": true
        },
        "totp_enabled": {
          "type": "boolean",
          "readOnly": true
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "goatcounter.UserSettings": {
      "title": "UserSettings",
      "description": "UserSettings are all user preferences.",
      "type": "object",
      "properties": {
        "date_format": {
          "type": "string"
        },
        "number_format": {
          "type": "string"
        },
        "sunday_starts_week": {
          "type": "boolean"
        },
        "timezone": {
          "$ref": "#/definitions/tz.Zone"
        },
        "twenty_four_hours": {
          "type": "boolean"
        },
        "views": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/goatcounter.View"
          }
        },
        "widgets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/goatcounter.Widget"
          }
        }
      }
    },
    "goatcounter.View": {
      "title": "View",
      "type": "object",
      "properties": {
        "daily": {
          "type": "boolean"
        },
        "filter": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "period": {
          "description": "\"week\", \"week-cur\", or n days: \"8\"",
          "type": "string"
        }
      }
    },
    "goatcounter.Widget": {
      "title": "Widget",
      "type": "object"
    },
    "handlers.APICountRequest": {
      "title": "APICountRequest",
      "type": "object",
      "properties": {
        "filter": {
          "description": "Filter pageviews; accepted values:\n\n ip Ignore requests coming from IP addresses listed in \"Settings → Ignore IP\". Requires the IP field to be set.\n\n[\"ip\"] is used if this field isn't sent; send an empty array ([]) to not\nfilter anything.\n\nThe X-Goatcounter-Filter header will be set to a list of indexes if any\npageviews are filtered; for example:\n\n X-Goatcounter-Filter: 5, 10\n\nThis header will be omitted if nothing is filtered.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hits": {
          "description": "Hits is the list of pageviews.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/handlers.APICountRequestHit"
          }
        },
        "no_sessions": {
          "description": "By default it's an error to send pageviews that don't have either a\nSession or UserAgent and IP set. This avoids accidental errors.\n\nWhen this is set it will just continue without recording sessions for\npageviews that don't have these parameters set.",
          "type": "boolean"
        }
      }
    },
    "handlers.APICountRequestHit": {
      "title": "APICountRequestHit",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "bot": {
          "description": "Hint if this should be considered a bot; should be one of the JSBot*`\nconstants from isbot; note the backend may override this if it\ndetects a bot using another method.\nhttps://github.com/zgoat/isbot/blob/master/isbot.go#L28",
          "type": "integer"
        },
        "created_at": {
          "description": "Time this pageview should be recorded at; this can be in the past,\nbut not in the future.",
          "type": "string",
          "format": "date-time"
        },
        "event": {
          "description": "Is this an event?",
          "type": "boolean"
        },
        "ip": {
          "description": "IP to get location from; not used if location is set. Also used for\nsession generation.",
          "type": "string"
        },
        "location": {
          "description": "Location as ISO-3166-1 alpha2 string (e.g. NL, ID, etc.)",
          "type": "string"
        },
        "path": {
          "description": "Path of the pageview, or the event name.",
          "type": "string"
        },
        "query": {
          "description": "Query parameters for this pageview, used to get campaign parameters.",
          "type": "string"
        },
        "ref": {
          "description": "Referrer value, can be an URL (i.e. the Referal: header) or any\nstring.",
          "type": "string"
        },
        "session": {
          "description": "Normally a session is based on hash(User-Agent+IP+salt), but if you don't\nsend the IP address then we can't determine the session.\n\nIn those cases, you can store your own session identifiers and send them\nalong. Note these will not be stored in the database as the sessionID\n(just as the hashes aren't), they're just used as a unique grouping\nidentifier.",
          "type": "string"
        },
        "size": {
          "description": "Screen size as \"x,y,scaling\"",
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "title": {
          "description": "Page title, or some descriptive event title.",
          "type": "string"
        },
        "user_agent": {
          "description": "User-Agent header.",
          "type": "string"
        }
      }
    },
    "handlers.apiError": {
      "title": "apiError",
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "errors": {
          "type": "object"
        }
      }
    },
    "handlers.apiExportRequest": {
      "title": "apiExportRequest",
      "type": "object",
      "properties": {
        "start_from_hit_id": {
          "description": "Pagination cursor; only export hits with an ID greater than this.",
          "type": "integer"
        }
      }
    },
    "handlers.apiSiteUpdateRequest": {
      "title": "apiSiteUpdateRequest",
      "type": "object",
      "properties": {
        "cname": {
          "type": "string"
        },
        "link_domain": {
          "type": "string"
        },
        "settings": {
          "$ref": "#/definitions/goatcounter.SiteSettings"
        }
      }
    },
    "handlers.apiSitesResponse": {
      "title": "apiSitesResponse",
      "type": "object",
      "properties": {
        "sites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/goatcounter.Site"
          }
        }
      }
    },
    "handlers.authError": {
      "title": "authError",
      "type": "object",
      "properties": {
        "Error": {
          "type": "string"
        }
      }
    },
    "handlers.meResponse": {
      "title": "meResponse",
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/goatcounter.APIToken"
        },
        "user": {
          "$ref": "#/definitions/goatcounter.User"
        }
      }
    },
    "tz.Zone": {
      "title": "Zone",
      "description": "Zone represents a time zone.",
      "type": "object",
      "properties": {
        "Abbr": {
          "description": "WITA – the correct abbreviation may change depending on the time of year (i.e. CET and CEST, depending on DST).",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Comments": {
          "description": "Borneo (east, south); Sulawesi/Celebes, Bali, Nusa Tengarra; Timor (west)",
          "type": "string"
        },
        "CountryCode": {
          "description": "ID",
          "type": "string"
        },
        "CountryName": {
          "description": "Indonesia",
          "type": "string"
        },
        "Zone": {
          "description": "Asia/Makassar",
          "type": "string"
        }
      }
    }
  }
}
