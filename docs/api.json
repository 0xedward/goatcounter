{
  "swagger": "2.0",
  "info": {
    "title": "GoatCounter",
    "description": "API for GoatCounter",
    "version": "0.1",
    "contact": {
      "name": "Martin Tournoij",
      "url": "https://www.goatcounter.com/api",
      "email": "support@goatcounter.com"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "count"
    },
    {
      "name": "export"
    },
    {
      "name": "user"
    }
  ],
  "paths": {
    "/api/v0/count": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This can count one or more pageviews. Pageviews are not persisted immediatly,\nbut persisted in the background every 10 seconds.\n\nThe maximum amount of pageviews per request is 100.\n\nErrors will have the key set to the index of the pageview. Any pageviews not\nlisted have been processed and shouldn't be sent again.\n\nThe response header has the X-Goatcounter-Memstore header set to the time of\nthe last time pageviews were persisted to the database. This is useful if you\nwant to (roughly) sync up with this.",
        "operationId": "POST_api_v0_count",
        "parameters": [
          {
            "in": "body",
            "name": "handlers.APICountRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/handlers.APICountRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "202 Accepted (no data)"
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/handlers.apiError"
            }
          },
          "403": {
            "description": "403 Forbidden",
            "schema": {
              "$ref": "#/definitions/handlers.authError"
            }
          }
        },
        "summary": "Count pageviews.",
        "tags": [
          "count"
        ]
      }
    },
    "/api/v0/export": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This starts a new export in the background.",
        "operationId": "POST_api_v0_export",
        "parameters": [
          {
            "in": "body",
            "name": "handlers.apiExportRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/handlers.apiExportRequest"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "202 Accepted",
            "schema": {
              "$ref": "#/definitions/goatcounter.Export"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/handlers.apiError"
            }
          },
          "403": {
            "description": "403 Forbidden",
            "schema": {
              "$ref": "#/definitions/handlers.authError"
            }
          }
        },
        "summary": "Start a new export in the background.",
        "tags": [
          "export"
        ]
      }
    },
    "/api/v0/export/{id}": {
      "get": {
        "operationId": "GET_api_v0_export_{id}",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "schema": {
              "$ref": "#/definitions/goatcounter.Export"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/handlers.apiError"
            }
          },
          "403": {
            "description": "403 Forbidden",
            "schema": {
              "$ref": "#/definitions/handlers.authError"
            }
          }
        },
        "summary": "Get details about an export.",
        "tags": [
          "export"
        ]
      }
    },
    "/api/v0/export/{id}/download": {
      "get": {
        "operationId": "GET_api_v0_export_{id}_download",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "responses": {
          "200": {
            "description": "200 OK (text/csv data)"
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/handlers.apiError"
            }
          },
          "403": {
            "description": "403 Forbidden",
            "schema": {
              "$ref": "#/definitions/handlers.authError"
            }
          }
        },
        "summary": "Download an export file.",
        "tags": [
          "export"
        ]
      }
    },
    "/api/v0/me": {
      "get": {
        "operationId": "GET_api_v0_me",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "200 OK",
            "schema": {
              "$ref": "#/definitions/handlers.meResponse"
            }
          },
          "400": {
            "description": "400 Bad Request",
            "schema": {
              "$ref": "#/definitions/handlers.apiError"
            }
          },
          "403": {
            "description": "403 Forbidden",
            "schema": {
              "$ref": "#/definitions/handlers.authError"
            }
          }
        },
        "summary": "Get information about the current user and API key.",
        "tags": [
          "user"
        ]
      }
    }
  },
  "definitions": {
    "goatcounter.APIToken": {
      "title": "APIToken",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "permissions": {
          "$ref": "#/definitions/goatcounter.APITokenPermissions"
        }
      }
    },
    "goatcounter.APITokenPermissions": {
      "title": "APITokenPermissions",
      "type": "object",
      "properties": {
        "count": {
          "type": "boolean"
        },
        "export": {
          "type": "boolean"
        }
      }
    },
    "goatcounter.Export": {
      "title": "Export",
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "error": {
          "description": "Any errors that may have occured.",
          "type": "string",
          "readOnly": true
        },
        "finished_at": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "hash": {
          "description": "SHA256 hash.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "readOnly": true
        },
        "last_hit_id": {
          "description": "Last hit ID that was exported; can be used as start_from_hit_id.",
          "type": "integer",
          "readOnly": true
        },
        "num_rows": {
          "type": "integer",
          "readOnly": true
        },
        "site_id": {
          "type": "integer",
          "readOnly": true
        },
        "size": {
          "description": "File size in MB.",
          "type": "string",
          "readOnly": true
        },
        "start_from_hit_id": {
          "description": "The hit ID this export was started from.",
          "type": "integer"
        }
      }
    },
    "goatcounter.User": {
      "title": "User",
      "description": "User entry.",
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "email": {
          "type": "string"
        },
        "email_verified": {
          "type": "boolean",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "readOnly": true
        },
        "login_at": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "reset_at": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "role": {
          "type": "string",
          "readOnly": true
        },
        "site": {
          "type": "integer",
          "readOnly": true
        },
        "totp_enabled": {
          "type": "boolean",
          "readOnly": true
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "handlers.APICountRequest": {
      "title": "APICountRequest",
      "type": "object",
      "properties": {
        "hits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/handlers.APICountRequestHit"
          }
        },
        "no_sessions": {
          "description": "Don't try to count unique visitors; every pageview will be considered a\n\"visit\".",
          "type": "boolean"
        }
      }
    },
    "handlers.APICountRequestHit": {
      "title": "APICountRequestHit",
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "bot": {
          "description": "Hint if this should be considered a bot; should be one of the JSBot*`\nconstants from isbot; note the backend may override this if it\ndetects a bot using another method.\nhttps://github.com/zgoat/isbot/blob/master/isbot.go#L28",
          "type": "integer"
        },
        "created_at": {
          "description": "Time this pageview should be recorded at; this can be in the past,\nbut not in the future.",
          "type": "string",
          "format": "date-time"
        },
        "event": {
          "description": "Is this an event?",
          "type": "boolean"
        },
        "ip": {
          "description": "IP to get location from; not used if location is set. Also used for\nsession generation.",
          "type": "string"
        },
        "location": {
          "description": "Location as ISO-3166-1 alpha2 string (e.g. NL, ID, etc.)",
          "type": "string"
        },
        "path": {
          "description": "Path of the pageview, or the event name.",
          "type": "string"
        },
        "query": {
          "description": "Query parameters for this pageview, used to get campaign parameters.",
          "type": "string"
        },
        "ref": {
          "description": "Referrer value, can be an URL (i.e. the Referal: header) or any\nstring.",
          "type": "string"
        },
        "session": {
          "description": "Normally a session is based on hash(User-Agent+IP+salt), but if you don't\nsend the IP address then we can't determine the session.\n\nIn those cases, you can store your own session identifiers and send them\nalong. Note these will not be stored in the database as the sessionID\n(just as the hashes aren't), they're just used as a unique grouping\nidentifier.\n\nYou can also just disable sessions entirely with NoSessions.",
          "type": "string"
        },
        "size": {
          "description": "Screen size as \"x,y,scaling\"",
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "title": {
          "description": "Page title, or some descriptive event title.",
          "type": "string"
        },
        "user_agent": {
          "description": "User-Agent header.",
          "type": "string"
        }
      }
    },
    "handlers.apiError": {
      "title": "apiError",
      "type": "object",
      "properties": {
        "Error": {
          "type": "string"
        },
        "Errors": {
          "type": "object"
        }
      }
    },
    "handlers.apiExportRequest": {
      "title": "apiExportRequest",
      "type": "object",
      "properties": {
        "start_from_hit_id": {
          "description": "Pagination cursor; only export hits with an ID greater than this.",
          "type": "integer"
        }
      }
    },
    "handlers.authError": {
      "title": "authError",
      "type": "object",
      "properties": {
        "Error": {
          "type": "string"
        }
      }
    },
    "handlers.meResponse": {
      "title": "meResponse",
      "type": "object",
      "properties": {
        "token": {
          "$ref": "#/definitions/goatcounter.APIToken"
        },
        "user": {
          "$ref": "#/definitions/goatcounter.User"
        }
      }
    }
  }
}
