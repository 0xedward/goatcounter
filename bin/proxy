#!/usr/bin/env python3
#
# mitmproxy <https://mitmproxy.org> addon to serve count.js locally, instead of
# the live version. It's the easiest way to test it manually for now (I need to
# figure out how to unit test this stuff in a way that I like).
#
# Start with: ~/mitmproxy -s ./bin/proxy
#
# Can also use mitmweb with the same arguments for a web interface.
#
# TODO: looks like we can also use standard "replace" with "@path/to/file"?

import mimetypes
import mitmproxy.http
import mitmproxy.ctx

REPLACE = {
        'static.goatcounter.com/count.min.js': './public/count.js',
        'gc.zgo.at/count.min.js':              './public/count.js',
        'zgo.at/':                             '../zgo.at/index.html',
}

class InterceptCount:
    def request(self, flow):
        for remote, local in REPLACE.items():
            if remote in flow.request.pretty_url:
                with open(local) as fp:
                    data = fp.read()
                ct = mimetypes.MimeTypes().guess_type(local)[0]
                flow.response = mitmproxy.http.HTTPResponse.make(200, data, {
                    'Content-Type': ct,
                })
                mitmproxy.ctx.log.info('Replaced {} with {} ({})'.format(remote, local, ct))
                break


addons = [InterceptCount()]
