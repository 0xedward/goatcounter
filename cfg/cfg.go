//go:generate sh -c "go run gen.go > cfg.go"

// Code generated by gen.go; DO NOT EDIT.

// Package cfg handles the application configuration.
package cfg

import (
	"flag"
	"fmt"
)

// Configuration variables.
var (
	Prod         bool   // Production mode: hide errors, don't reload.
	Domain       string // Base domain
	DomainStatic string // Domain to serve static files from.
	Listen       string // Address to listen on.
	DBConnect    string // Database connection string.
	SMTP         string // SMTP connection string.
	Sentry       string // Sentry connection string
)

// Set configuration variables from os.Args.
func Set() {
	flag.BoolVar(&Prod, "prod", false, "Production mode: hide errors, don't reload.")
	flag.StringVar(&Domain, "domain", "localhost:8081", "Base domain")
	flag.StringVar(&DomainStatic, "domainstatic", "static.localhost:8081", "Domain to serve static files from.")
	flag.StringVar(&Listen, "listen", "localhost:8081", "Address to listen on.")
	flag.StringVar(&DBConnect, "dbconnect", "db/db.sqlite3", "Database connection string.")
	flag.StringVar(&SMTP, "smtp", "smtps://b42bfac68fec83:f8dd7327e3e8b3@smtp.mailtrap.io:465", "SMTP connection string.")
	flag.StringVar(&Sentry, "sentry", "", "Sentry connection string")
	flag.Parse()
}

// Print out all configuration values.
func Print() {
	fmt.Printf("Prod           %#v\n", Prod)
	fmt.Printf("Domain         %#v\n", Domain)
	fmt.Printf("DomainStatic   %#v\n", DomainStatic)
	fmt.Printf("Listen         %#v\n", Listen)
	fmt.Printf("DBConnect      %#v\n", DBConnect)
	fmt.Printf("SMTP           %#v\n", SMTP)
	fmt.Printf("Sentry         %#v\n", Sentry)
}
